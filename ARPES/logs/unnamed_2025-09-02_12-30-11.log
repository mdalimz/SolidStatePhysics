# IPython log file

from arpes.io import example_data

bi2se3_cut = example_data.cut # <- here, take `cut` above
                              # any of `map`, `photon_energy`,
                              # `nano_xps`, or
                              # `temperature_dependence` will work
bi2se3_cut
example_data
from arpes.io import example_data

bi2se3_cut = example_data # <- here, take `cut` above
                              # any of `map`, `photon_energy`,
                              # `nano_xps`, or
                              # `temperature_dependence` will work
from arpes.io import example_data

bi2se3_cut = arp.example_data # <- here, take `cut` above
                              # any of `map`, `photon_energy`,
                              # `nano_xps`, or
                              # `temperature_dependence` will work
from arpes.io import example_data
import arpes as arp

bi2se3_cut = arp.example_data # <- here, take `cut` above
                              # any of `map`, `photon_energy`,
                              # `nano_xps`, or
                              # `temperature_dependence` will work
from arpes.io import example_data
import arpes as arp

bi2se3_cut = example_data.cut# <- here, take `cut` above
                              # any of `map`, `photon_energy`,
                              # `nano_xps`, or
                              # `temperature_dependence` will work
from arpes.io import example_data
import arpes as arp

bi2se3_cut = example_data.map # <- here, take `cut` above
                              # any of `map`, `photon_energy`,
                              # `nano_xps`, or
                              # `temperature_dependence` will work
bi2se3_cut
from arpes.io import example_data
import arpes as arp

bi2se3_cut = example_data.cut # <- here, take `cut` above
                              # any of `map`, `photon_energy`,
                              # `nano_xps`, or
                              # `temperature_dependence` will work
bi2se3_cut
bi2se3_cut
from arpes.io import example_data
import arpes as arp

bi2se3_cut = example_data.cut # <- here, take `cut` above
                              # any of `map`, `photon_energy`,
                              # `nano_xps`, or
                              # `temperature_dependence` will work
bi2se3_cut
bi2se3_cut = example_data.map # <- here, take `cut` above
bi2se3_map = example_data.map # <- here, take `cut` above
bi2se3_map
bi2se3_map = example_data.photon_energy # <- here, take `cut` above
bi2se3_map
bi2se3_map = example_data.map # <- here, take `cut` above
bi2se3_map
bi2se3_photon energy= example_data.photon_energy
bi2se3_photon_energy= example_data.photon_energy
bi2se3_photon_energy
bi2se3_xps= example_data.nono_xps
bi2se3_xps= example_data.nano_xps
bi2se3_xps
bi2se3_photon_energy= example_data.temperature-dependance
bi2se3_photon_energy= example_data.temperature_dependance
bi2se3_photon_energy= example_data.temperature_dependence
bi2se3_tem
bi2se3_temperature
bi2se3_temperature= example_data.temperature_dependence
bi2se3_temperature
# just transpose to a more natural axis order with `.T` and plot
bi2se3_cut.spectrum.T.plot()
from arpes.io import example_data
import arpes as arp

bi2se3_cut = example_data.cut # <- here, take `cut` above
                              # any of `map`, `photon_energy`,
                              # `nano_xps`, or
                              # `temperature_dependence` will work
bi2se3_cut
# just transpose to a more natural axis order with `.T` and plot
bi2se3_cut.spectrum.T.plot()
# just transpose to a more natural axis order with `.T` and plot
bi2se3_map.spectrum.T.plot()
bi2se3_photon_energy
# just transpose to a more natural axis order with `.T` and plot
bi2se3_photon_energy.spectrum.T.plot()
# just transpose to a more natural axis order with `.T` and plot
bi2se3_photon_energy.spectrum.hv.plot()
# just transpose to a more natural axis order with `.T` and plot
bi2se3_photon_energy.spectrum.T.plot()
bi2se3_xps
bi2se3_xps= example_data.nano_xps
bi2se3_xps
# just transpose to a more natural axis order with `.T` and plot
bi2se3_xps.spectrum.T.plot()
# just transpose to a more natural axis order with `.T` and plot
bi2se3_temperature.spectrum.T.plot()
# just transpose to a more natural axis order with `.T` and plot
bi2se3_cut.spectrum.T.plot()
# just transpose to a more natural axis order with `.T` and plot
get_ipython().run_line_magic('matplotlib', 'inline')
bi2se3_cut.spectrum.T.plot()
import numpy as np
import matplotlib as plt
from arpes.io import example_data
import arpes as arp

bi2se3_cut = example_data.cut # <- here, take `cut` above
                              # any of `map`, `photon_energy`,
                              # `nano_xps`, or
                              # `temperature_dependence` will work
bi2se3_cut
# just transpose to a more natural axis order with `.T` and plot
bi2se3_cut.spectrum.T.plot()
bi2se3_map = example_data.map # <- here, take `cut` above
bi2se3_map
# just transpose to a more natural axis order with `.T` and plot
bi2se3_map.spectrum.T.plot()
bi2se3_photon_energy= example_data.photon_energy
bi2se3_photon_energy
# just transpose to a more natural axis order with `.T` and plot
bi2se3_photon_energy.spectrum.T.plot()
bi2se3_xps= example_data.nano_xps
bi2se3_xps
# just transpose to a more natural axis order with `.T` and plot
bi2se3_xps.spectrum.T.plot()
bi2se3_temperature= example_data.temperature_dependence
bi2se3_temperature
# just transpose to a more natural axis order with `.T` and plot
bi2se3_temperature.spectrum.T.plot()
# just transpose to a more natural axis order with `.T` and plot
get_ipython().run_line_magic('matplotlib', 'inline')
bi2se3_cut.spectrum.T.plot()
# just transpose to a more natural axis order with `.T` and plot
get_ipython().run_line_magic('matplotlib', 'inline')
bi2se3_cut.spectrum.T.plot()
plt.imsave()
# just transpose to a more natural axis order with `.T` and plot
get_ipython().run_line_magic('matplotlib', 'inline')
bi2se3_cut.spectrum.T.plot()
plt.savefig()
# just transpose to a more natural axis order with `.T` and plot
get_ipython().run_line_magic('matplotlib', 'inline')
bi2se3_cut.spectrum.T.plot()
plt.savefig("1")
import numpy as np
import matplotlib.pyplot as plt
from arpes.io import example_data
import arpes as arp

bi2se3_cut = example_data.cut # <- here, take `cut` above
                              # any of `map`, `photon_energy`,
                              # `nano_xps`, or
                              # `temperature_dependence` will work
